project structure

my-angular-app/
├── src/
│   ├── app/
│   │   ├── core/
│   │   │   └── services/
│   │   │       └── my-core-service.ts
│   │   ├── shared/
│   │   │   └── components/
│   │   │       └── my-shared-component/
│   │   │           ├── my-shared-component.component.ts
│   │   │           └── my-shared-component.component.html
│   │   └── features/
│   │       └── my-feature/
│   │           └── my-feature.component.ts
│   │           └── my-feature.component.html
│   └── assets/
│   └── environments/
│   └── index.html
├── package.json
└── angular.json



my-angular-app/ 
├── src/ 
│   ├── app/ 
│   │   ├── components/ 
│   │   │       └── my-component/
│   │   └── services/ 
│   │       └── my-service/ 
│   └── assets/ 
│   └── environments/ 
│   └── index.html 
├── package.json 
└── angular.json



app
├── apimodule
├── module1
├── module2
├── module3
|   ├── components
|   |   ├── component1
|   |   ├── component2
|   |   ├── component3
|   |   |   ├── component3.component.ts
|   |   |   ├── component3.component.html
|   |   |   ├── component3.component.scss
|   ├── pages
|   |   ├── page1
|   |   ├── page2
|   |   ├── page3
|   |   |    ├── page3.component.ts
|   |   |    ├── page3.component.html
|   |   |    ├── page3.component.scss
|   ├── services
|   |   ├── service1.service.ts
|   ├── module3.constant.ts
|   ├── module3.interface.ts
|   ├── module3.component.ts
|   ├── module3.component.html
|   ├── module3.component.scss
|   ├── module3-routing.module.ts
|   ├── module3.module.ts
├── shared (or common too) and core (explanation below)
|   ├── components
|   ├── directives
|   ├── pipes
|   ├── services
|   ├── guards
|   ├── constants
|   ├── interceptors
|   ├── interfaces
|   ├── models
├── app-routing.module.ts
├── app.component.html
├── app.component.ts
├── app.module.ts
ApiModule: Consist on a module generated by u/openapitools/openapi-generator-cli. Every time there are changes on the backend, I need to run a command to update this.
Module:
- The folder "components" contains most of the time dumb/presentational components. Sometimes there are 1 or 2 smart components that internally use the other components in this folder.
- The folder "pages" contains components that are always smart. They have services injected from the same module, shared or core. These components use the components inside the components folder and they are called in the module.routing.ts file.
- The folder "services" contains services (some store-like contains BehaviorSubjects and expose them as observables) related to that module. These services use another services, wether from core or shared, but most of the time from apimodule.
- The file "module.constant" contains constants/enums related to that module.
- The file "module.interface" contains interfaces related to that module (interfaces like inputs of the dumb components, observables in services, etc.).
Shared/Common and Core
Before standalone components I would have a few share modules, now I only have a folder thats is not even a module where I store standalone components, services injected on root, guardas, pipes, etc. that I want to use in the whole project.
I do the same with a core folder, but the difference is that I store things unique to the project in this folder, in contrast with the shared/common folder where anything could be dropped in another project without problems.